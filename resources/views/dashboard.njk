{% extends 'layout/master' %} {% block content %}

<script src="https://unpkg.com/adonis-websocket-client@1.0.2/dist/ws.js"></script>
<script src="https://code.highcharts.com/stock/highstock.js"></script>
<script src="https://code.highcharts.com/stock/modules/exporting.js"></script>

  <div class="testimonials-4">

      <div class="one_thirdpx">
        <div class="content">
          <h3 class="section_label">
            <span class="right"><i class="fa fa-check-square"></i>&nbsp;&nbsp;&nbsp;Bitcoin</span>
          </h3>
          <div class="clear"></div>
          <div class="dotted"></div>
        {% if accounts.bitcoin %}
          <!-- <h3 class="section_label01"> <span class="right">&nbsp;&nbsp;&nbsp;Bitcoin Available Balance</span> </h3> -->
          <div class="section_label02">

            <h6>Available</h6>
            <div class="amountbalance" id="decimals1">{{ accounts.bitcoin.balance.available }}</div>
          </div>
          <div class="clear"></div>
          <div class="section_label02">

            <h6>Pending</h6>
            <div class="amountbalance" id="decimals1">{{ accounts.bitcoin.balance.pending }}</div>

          </div>
          <div class="clear"></div>
        {% else %}
          <p class="notice" style="margin-top: 20px;">
            <i class="fa fa-exclamation-triangle"></i>&nbsp;&nbsp;&nbsp;No account created.
          </p>
          <div class="mar_top2"></div>
          <a href="/accounts/tracto" class="but_user">Create Account</a>
        {% endif %}
        </div>
      </div>
      <div class="one_thirdpx">
        <div class="content">
          <h3 class="section_label">
            <span class="right"><i class="fa fa-check-square"></i>&nbsp;&nbsp;&nbsp;Tracto</span>
          </h3>
          <div class="clear"></div>
          <div class="dotted"></div>
        {% if accounts.tracto %}
          <!-- <h4 class="section_label01">&nbsp;&nbsp;&nbsp;Tracto Available Balance</h4> -->
          <div class="section_label02">

            <h6>Available</h6>
            <div class="amountbalance" id="decimals1">{{ accounts.tracto.balance.available }}</div>

          </div>
          <div class="clear"></div>
          <div class="section_label02">
            <h6>Pending</h6>
            <div class="amountbalance" id="decimals1">{{ accounts.tracto.balance.pending }}</div>
          </div>
          <div class="clear"></div>
        {% else %}
          <p class="notice" style="margin-top: 20px;">
            <i class="fa fa-exclamation-triangle"></i>&nbsp;&nbsp;&nbsp;No account created.
          </p>
          <div class="mar_top2"></div>
          <a href="/accounts/tracto" class="but_user">Create Account</a>
        {% endif %}
        </div>
      </div>
      <div class="one_thirdpx lastpx">
        <div class="content">
          <h3 class="section_label">
            <span class="right"><i class="fa fa-check-square"></i>&nbsp;&nbsp;&nbsp;Ethereum</span>
          </h3>
          <div class="clear"></div>
          <div class="dotted"></div>
          <!-- <h3 class="section_label01"> <span class="right">&nbsp;&nbsp;&nbsp;Ethereum Available Balance</span> </h3> -->
        {% if accounts.ethereum %}
          <div class="section_label02">
            <h6>Available</h6>
            <div class="amountbalance" id="decimals1">{{ accounts.ethereum.balance.available }}</div>
          </div>
          <div class="clear"></div>
          <!--
          <div class="section_label02">
            <div class="amountbalance" id="decimals1">0.00000000000</div>
          </div>
          <div class="clear"></div>
          -->
        {% else %}
          <p class="notice" style="margin-top: 20px;">
            <i class="fa fa-exclamation-triangle"></i>&nbsp;&nbsp;&nbsp;No account created.
          </p>
          <div class="mar_top2"></div>
          <a href="/accounts/ethereum" class="but_user">Create Account</a>

        {% endif %}
        </div>
      </div>

  </div>

  <div class="mar_top4"></div>
  <div class="one_half">
    <h3><i class="fa fa-line-chart"></i>&nbsp;&nbsp;&nbsp;Current BTC Ask &amp; Bid Price</h3>
  </div>
  <div id="container" style="height: 500px; min-width: 310px; margin-bottom:250px;"></div>
  <script type="text/javascript">
    // io refers to the above import
    const io = ws('http://localhost:3333')
    const client = io.channel('market').connect(function(error, connected) {
      console.log('Connected: ', connected)
      console.log('Error: ', error)
    })
    client.on('message', function(message) {
      console.log('Got message: ', message)
    })
    client.emit('message', 'Some market data...')

    // now, process the seel signals
    // client.on('sell', (data) => {
    //   console.log('Got sell data', data)
    // })

    // client.on('buy', (data) => {
    //   console.log('Got buy data', data)
    // })

    Highcharts.setOptions({
      global: {
        useUTC: false
      }
    });

    // import Highcharts from '../parts/Globals.js';
    Highcharts.createElement('link', {
      href: 'https://fonts.googleapis.com/css?family=Unica+One',
      rel: 'stylesheet',
      type: 'text/css'
    }, null, document.getElementsByTagName('head')[0]);

    Highcharts.theme = {
      colors: ['#efaa06', '#ee5a41', '#f45b5b', '#efaa06', '#aaeeee', '#ff0066', '#efaa06',
        '#55BF3B', '#DF5353', '#7798BF', '#aaeeee'
      ],
      chart: {
        backgroundColor: {
          linearGradient: {
            x1: 0,
            y1: 0,
            x2: 1,
            y2: 1
          },
          stops: [
            [0, '#2a2a2b'],
            [1, '#3e3e40']
          ]
        },
        style: {
          fontFamily: '\'Roboto Condensed\', sans-serif'
        },
        plotBorderColor: '#606063'
      },
      title: {
        style: {
          color: '#E0E0E3',
          textTransform: 'uppercase',
          fontSize: '18px'
        }
      },
      subtitle: {
        style: {
          color: '#E0E0E3',
          textTransform: 'uppercase'
        }
      },
      xAxis: {
        gridLineColor: '#707073',
        labels: {
          style: {
            color: '#E0E0E3',
            fontSize: '14px'

          }
        },
        lineColor: '#707073',
        minorGridLineColor: '#505053',
        tickColor: '#707073',
        title: {
          style: {
            color: '#A0A0A3'

          }
        }
      },
      yAxis: {
        gridLineColor: '#707073',
        labels: {
          style: {
            color: '#E0E0E3',
            fontSize: '14px'
          }
        },
        lineColor: '#707073',
        minorGridLineColor: '#505053',
        tickColor: '#707073',
        tickWidth: 1,
        title: {
          style: {
            color: '#A0A0A3'
          }
        }
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.85)',
        style: {
          color: '#F0F0F0'
        }
      },
      plotOptions: {
        series: {
          dataLabels: {
            color: '#B0B0B3'
          },
          marker: {
            lineColor: '#333'
          }
        },
        boxplot: {
          fillColor: '#505053'
        },
        candlestick: {
          lineColor: 'white'
        },
        errorbar: {
          color: 'white'
        }
      },
      legend: {
        itemStyle: {
          color: '#E0E0E3'
        },
        itemHoverStyle: {
          color: '#FFF'
        },
        itemHiddenStyle: {
          color: '#606063'
        }
      },
      credits: {
        style: {
          color: '#666'
        }
      },
      labels: {
        style: {
          color: '#707073'
        }
      },

      drilldown: {
        activeAxisLabelStyle: {
          color: '#F0F0F3'
        },
        activeDataLabelStyle: {
          color: '#F0F0F3'
        }
      },

      navigation: {
        buttonOptions: {
          symbolStroke: '#DDDDDD',
          theme: {
            fill: '#505053'
          }
        }
      },

      // scroll charts
      rangeSelector: {
        buttonTheme: {
          fill: '#505053',
          stroke: '#000000',
          style: {
            color: '#CCC'
          },
          states: {
            hover: {
              fill: '#707073',
              stroke: '#000000',
              style: {
                color: 'white'
              }
            },
            select: {
              fill: '#000003',
              stroke: '#000000',
              style: {
                color: 'white'
              }
            }
          }
        },
        inputBoxBorderColor: '#505053',
        inputStyle: {
          backgroundColor: '#333',
          color: 'silver'
        },
        labelStyle: {
          color: 'silver'
        }
      },

      navigator: {
        handles: {
          backgroundColor: '#666',
          borderColor: '#AAA'
        },
        outlineColor: '#CCC',
        maskFill: 'rgba(255,255,255,0.1)',
        series: {
          color: '#7798BF',
          lineColor: '#A6C7ED'
        },
        xAxis: {
          gridLineColor: '#505053'
        }
      },

      scrollbar: {
        barBackgroundColor: '#808083',
        barBorderColor: '#808083',
        buttonArrowColor: '#CCC',
        buttonBackgroundColor: '#606063',
        buttonBorderColor: '#606063',
        rifleColor: '#FFF',
        trackBackgroundColor: '#404043',
        trackBorderColor: '#404043'
      },

      // special colors for some of the
      legendBackgroundColor: 'rgba(0, 0, 0, 0.5)',
      background2: '#505053',
      dataLabelsColor: '#B0B0B3',
      textColor: '#C0C0C0',
      contrastTextColor: '#F0F0F3',
      maskColor: 'rgba(255,255,255,0.3)'
    };

    Highcharts.setOptions(Highcharts.theme);

    // Create the chart
    Highcharts.stockChart('container', {
      chart: {
        events: {
          load: function() {

            var series = this.series;
            // set up the updating of the chart each second
            var series = this.series[0];
            client.on('sell', (data) => {
              console.log('Got sell data:', data)
              var x = (new Date()).getTime(), // current time
                y = parseFloat(data.rate); //Math.round(Math.random() * 100);
              series.addPoint([x, y], true, true);
            })
            // set up the updating of the chart each second
            var series1 = this.series[1];
            client.on('buy', (data) => {
              console.log('Got buy data:', data)
              var x = (new Date()).getTime(), // current time
                y = parseFloat(data.rate); //Math.round(Math.random() * 100);
              series1.addPoint([x, y], true, true);
            })

          }
        }
      },

      rangeSelector: {
        buttons: [{
          count: 1,
          type: 'minute',
          text: '1M'
        }, {
          count: 5,
          type: 'minute',
          text: '5M'
        }, {
          type: 'all',
          text: 'All'
        }],
        inputEnabled: false,
        selected: 0
      },

      title: {
        text: ''
      },

      exporting: {
        enabled: false
      },

      yAxis: {
        min: 1000,
        max: 10000,
        startOnTick: true,
        endOnTick: true
      },

      series: [{
          name: 'Sell',
          data: (function() {
            // generate an array of random data
            var data1 = [],
              time = (new Date()).getTime(),
              i;

            for (i = -10; i <= 0; i += 1) {
              data1.push([
                time + i * 1000,
                2000 + Math.round(Math.random() * 4000)
              ]);
            }
            return data1;
          }())
        },
        {
          name: 'Buy',
          data: (function() {
            // generate an array of random data
            var data2 = [],
              time = (new Date()).getTime(),
              i;

            for (i = -10; i <= 0; i += 1) {
              data2.push([
                time + i * 1000,
                2000 + Math.round(Math.random() * 4000)
              ]);
            }
            return data2;
          }())
        }
      ]
    });
  </script>


  <div class="mar_top20"></div>
  <div class="one_full">
    <input id="transactions_timestamp" value="1492794751000" type="hidden">
    <h3><i class="fa fa-exchange"></i>&nbsp;&nbsp;Latest Transactions</h3>
    <div class="table-style">
      <table class="table-list trades" id="transactions_list">
        <tbody>
          <tr>
            <th>No.</th>
            <th>Action</th>
            <th>Status</th>
            <th>Type</th>
            <th>Date Created</th>
          </tr>
          <tr id="order_1179970">
            <td style=""><span class="time_since hasCountdown">22 Seconds</span>
              <input class="time_since_seconds" value="1492794823" type="hidden"></td>
            <td style="">0.03810000 BTC</td>
            <td style="">$1,255.04</td>
            <td style="">$1,255.04</td>
            <td style="">$1,255.04</td>
          </tr>
          <tr id="order_1179969">
            <td style=""><span class="time_since hasCountdown">22 Seconds</span>
              <input class="time_since_seconds" value="1492794823" type="hidden"></td>
            <td style="">0.03110000 BTC</td>
            <td style="">$1,255.04</td>
            <td style="">$1,255.04</td>
            <td style="">$1,255.97</td>
          </tr>
          <tr id="order_1179968">
            <td style=""><span class="time_since hasCountdown">22 Seconds</span>
              <input class="time_since_seconds" value="1492794823" type="hidden"></td>
            <td style="">0.05660000 BTC</td>
            <td style="">$1,256.25</td>
            <td style="">$1,256.25</td>
            <td style="">$1,256.25</td>
          </tr>
          <tr id="no_transactions" style="display:none;">
            <td colspan="3">No transactions to show.</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
  <div class="mar_top10"></div>




{% endblock %}
